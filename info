Why js framework or libraries?
-Complexity of managing DOM manipulation and data updates manually.
-Well Defined application architecture
    --model view container/ model view view ModelView/modelview whatevere
    --binding of model adn view : controllers, view models
    --flux architecture/redux


Software library
-collection of implementation of behaviour with a well-defined interface by which
 the behavior is invoked
-reuse of behaviour
-Modulariy
eg jquery

Sotware framework
-Abstraction in whihc software provides generic functionality that can be selectively
changed by additional user-written code
-universal, reusable environment that provides particular
functionality as part of a larger software platform
Eg, Angular, Enber, Backbone

Library vs framework
library - your code is in charge and it calls into the library when it sees fit.
framework - The framework is in charger and it calls into your code when it needs something app specific

framework
Inversion of control
Imperative approach - designer specifies how the work need to be done
Declarative approach - designer specifies what work needs to be done


React use declarative approach
Component based approach, we encapsulate behaviours into small units called component
Technology stack agnostic
React designed by Jordan Walke
Speed, simplicity and scalability

One way data flow
JSX
components
state
props
virtual DOM
Element

Component
it returns a set of react elements thar sjhould appear on the screen

component enable you to split your ui into indepnent, reusable pctAOIAMVStI2TMLhozPKbf5yTEXc0OJa0eENheb4w09SrgOWEs
components also accept inputs

State
each component can store its own state info in its "state" property

private and fully controlled bby the component
can be passed as propsto children

Only class components can have local state

setState methid to change the content of state

JSX attribute are passsed into a component as a single objects
available in the compoennt as props
can pass inmultiplee attributes 
cannot modify props within the component

Handling events
Handling events is a similar to the way you handle events on DOM elements:
use camelcase to specify events 
Pass function as the event handler

Lifting State up
sometimes several components may share the same data
changes to data in one component needs to be reflected to another component
Best move the shared state to a common ancestor component

list and keys
list are handled similar to js
key should be given to elements inside the array - help indentify whihc ites have changed, are added or removed

Life Cycle of the component
There are several component are used to create a react application.
As required component is created and added to DOM.

Stages of life Cycle of component in react
-mounting
-Updating
-Unmounting

Several lifecycle methods available in each Stages
MOunting Lifecycle methods
- called when an instance of a component is being created and inserted into the  DOM
- constructor() - 
- getDerivedStateFromProps()
- render()
- componentDidMount()

An earlier method now deprecated called 
- componentWillMount


Presentational and Container component
Presentational compoennt only get the data as propd and they are responsible for pureluyy Presentational compoent
Container compoennt only pass the data to its child component

component Types
Presentational vs container
Skinny vs fat 
Dumb vs Smart
Stateless and stateful

presentational component 
- maiinly concerned with rendering the "view"
- render the view based on the data that is passed to them in props
- Do not maintain teir own local state - can be relaxed to maintain only UI state than data

Container component 
Responsible formaking things work
- Data fetching, state updates
Make use of presentational component for rendering
- can wrap presentational comopnent in wrapping divs 
Provide the data to the presentational components
maintain state and communicate with data sources

life cycyle methods
Stages of life Cycle of component in react
-mounting
-Updating
-Unmounting

Several lifecycle methods available in each Stages

Updating Lifecycle methods
called when a component sis being re-rendered
- Can be caused by changes to props or state
- getDerivedStateFromProps()
- shouldComponentUpdate()
- render()
- getSnapshotBeforeUpdate()
- compoentDidUpdate()

2 Mehods that are now deprecated
componentWillReceiveProps() and componentWillUpdate()

Class Component
Extend React.Component to get class component
Need to implement the render() method that returns the view
can have local state
lifecycle hook

Functional component
Simplest way to define Reacct component
JS function that retunrs a React element, or a collection of React elements that define the view
Receives a props object as a parameter
Cannot have local state or access lifecycle hook

React Virtual DOM
Browser DOm is a browser object
Virtual DOM is saReact object
- A lightweight representation of the Browser DOM
- In menory tree data structure of plain JS objects
- Manipulations extremely fast compared to modifying the browser DOM
- created completely from scratch on every setState

Diffing Algorithm will detect those nodes that are changed
- Updates the entire sub-tree if diffing detects that 2 elements are of different types
- Using "key" you can hint child elements as stable
-- No need to re-render where keys do not change

React-Fiber : new reconsilation Algorithm in React-16 
- Incremental rendering

React Router
- to navigate among various page of your application

Collection of navigational component
- Enables navigation among views
- Router components, route matching components and navigation component
Uses a browser-based bookmarkable URLs as an instruction to naviagte to a client genrated view in your web app
- Can also pass along optional parameters

Web app routing 
react router DOm
Router compoennt <Browserrouter>
- Creates specializes history object
- Also <HashRouter> if you are uing a static fie server
- Enclose your app in BrowserRouter
 
Route matching
component Route and Switch
- <Route>'s path prop enables specification of the current location's pathname
- Route component prop specifies the corresponding viw for the location
- Using exact attribute ensures that the path must be exactly matched 
- Redirect enable the default route specification 
- Switch enables grouping together several routes
-- Will iterate over all its children and find the first one that matches the path. 

navigation
Naviagtion is supported through the <Link> and <NavLink> component
- <Link> creates links in your application 
-- will render as <a> in the html
- <NavLink> also attaches the active class to the link when its 
props matches the current location

Single page application
Web application or web site  that fits in a single page
- No need to reload th entire page
- UX like a desktop/native application
- Most Resources are retreived with a single page load
- redraw parts of the page when needed without requiring a full server roundtrip

Challenge
- Search engine optimization
- Partitioning the responsibility betwenn client and server
- Maintaining history
- Analytics
- Speeding up the initial page load

React Router 
- Path specified as a URL
- Path can also carry parameters values
-- eg / menu/42 where 42 is a route parameter
- Route parameters specified in thepath specification as a token
-- eg path: menu/:id where id is the token

Route parameters cam be spedified using a link parameter while specifyinng the link
- eg <Link to{'/menu/$(dish.id)'}>
Route passes three props to the component
- match, location, history

match object
match object provides information about how a <Route path> matched the URL
- params: an object that contains key/value pair parsed fromm the URL corresponding to the dynamic segments of the path
-- eg if path  is specified as /menu/:id, then a path like /menu/42 will result in math.params.id being equal to "42"

Controlled Forms
- Cohesive, effective and compelling dta entry experience
- Extensivey used in websited and web applications for
-- log in
-- submit information (placing orders, booking a ticket etc)

HTML Forms
Form tag
Form element
- input
- textarea
- button
- select

These elements maintain their own state and update it based on user input

Controlled Component
Make the react comoponent control the form that it renders
- Single source of truth
- Tying the form state to component state
- controlled component
Every state mutation will have an associated handler function

Uncontrolled components
- Ideally you should implement forms within controlled components
- sometimes this approach may be too tedious
- Uncontrolled component approach allows you to handle the form data by the DOM itself
- Instead of writing an event handler for every state updat, use a ref to get form values from the DOM
- More easier to integrate React with non-React code

Design Patterns
Well-documenter solution to a recurring problem
-Also reffered to as an artchitectural pattern

Software design pattern
-Reusable solution to commonly occuring problems

Model View Controller framework
Software engineering architecture Patterns
- Isolation of domain logic from user interface
- Permits independent development, testing and maintenace(separation of concerns)

        ---> controller
        |    /`     \,
        view  <--- Modal    
               ===>

Model
-Manages the behavior and data of the appliactiondomain
-responds to requests for information about its state(usually froom the view)
-respopnds to instructions to change state(usually from the controller)
-In even-driven systems, the model notifies observers(usually views) when the information change so  that they can react

View
-renders the model into a form suitable for interaction, typically a user interface element
-multiple views can exist for a single model for different purposes
-A viewport typically has a ont to onr correspondence with a display and knows how to render to it

Controller
-receives user input and initialtes a response by making on modal objects
-A controller accepts inout from te user and instructs the model and viewport to perform actions based on that input

Model View View-Model
-Descendent of MVC
-Sometimes called Model-View-Binder
    Databinding
View <---> View Model ---> Mpdel
                       <---
Presentational      business Logic and data
logic    

View Model
- Abstraction of the view that exposes public properties and commands
- Declarative and data binding

The flux architecture

React and MVC
- Initially React was viewed as the "V" in MVC
-- Not emphasized any more
Facebook found issues with using the standard MVC architecture pattern
-Discardrr in favorof theflus architecture
-problems with cascading updates, decentralized mutations, race conditions

The flux architecture
Unidirectional Data Flow
Action ---> Dispatcher ---> Store ---> View

New actions propogates through the system in response to user interactions

Introduction to Redux
What is Redux?
-Predictable state container for js apps
-Inspired by Flux,Elm,immutable
-Makes state mutations Predictable

Main Principles of Redux
- Single source of truth
-- Single state object tree within a single store
- State is red only(only getters, no setters)
-- changes should only be done through actions
- Changes are made with pure functions
-- Take previous atate and action and return next state
-- No mutation of the previous state
- Single store and single state tree enables powerful techniques
-- Logging
-- API Handling
-- undo/redo
-- State persistance
-- "time-travel debuggin"

Redux concepts
Store: stored in plain js object
Action: plain JS object with a type field that specifies how to change something in the state
Reducer: pure function that takes the current state and actions and retunr a new state
- Update data immuatBly (do not modify inputs)

Redux store
-  Holds the current state value
- Created using createStore()
-Supplies 3 methods
-- dispatch() states state updates eithe the provided action object
-- getState() returns the current stored state value
-- aubscribe() accepts a callback function that will be run every time an action is dispatched

React with redux
-Use th rreact-reux package for bindings betwenn React and Redux
-- connect() : generates a wrapper "container" component that subscribes to the store
-- Surround your App root with <Provider>
--- Takes the store as an attribute
--- makes store accesible toa ll connected components

To connect() function takes 2 optional arguments
- mapStateToProps() called every time store state changes. retunrs an object full of data with each field being a proop for the wrapped component
- mapDispachToProps() receives the dispatch() method and should return an object full of function that use dispatch()

React-redux-Form
- A versatile, fast and intuitive library for creating complex and performant forms in react and redux
- Collection of reducer creators and action creators
- Form data stored in Redux store in a model
- Validation support for forms

LocalForm
-Maps form model to local state of the component
- Suitable when you don't need form data persistance across component mounting/unmounting
- Can still perform form validation using support from react-redux-form

React Action
Actions: payloa of information that sends data fromyour application to the store
- Done through store.dispatch()

Plain JS object that must have
- A type property that indicates the type of action to be performed
-- Best suppported by defining action types as String constants
- Rest of the object contains the data necessary for the action(payload)

Action creators
Functions that create actions
- Encapsulate the process of creating the action objects
- return the action object
- Resulting action object cam be passed to the store through dispatch()

Action and Reducer
Reducers should be able to take the previous statte and action and retunt next state
- Do not mutate state
-- make a copy and modify the copy before returing it
- Actions typically handled through a switch statement switching on the action type
- Return the previous state in the default case

Splitting and combining reducers
Depending on the state shape, field and updates to them could be decoupled:
- split the reducer into silper reducer functions that operate on only some of the fields
-- Manages parts/slices of the global state
- Combine the simplper functions to generate the overall state
