Why js framework or libraries?
-Complexity of managing DOM manipulation and data updates manually.
-Well Defined application architecture
    --model view container/ model view view ModelView/modelview whatevere
    --binding of model adn view : controllers, view models
    --flux architecture/redux


Software library
-collection of implementation of behaviour with a well-defined interface by which
 the behavior is invoked
-reuse of behaviour
-Modulariy
eg jquery

Sotware framework
-Abstraction in whihc software provides generic functionality that can be selectively
changed by additional user-written code
-universal, reusable environment that provides particular
functionality as part of a larger software platform
Eg, Angular, Enber, Backbone

Library vs framework
library - your code is in charge and it calls into the library when it sees fit.
framework - The framework is in charger and it calls into your code when it needs something app specific

framework
Inversion of control
Imperative approach - designer specifies how the work need to be done
Declarative approach - designer specifies what work needs to be done


React use declarative approach
Component based approach, we encapsulate behaviours into small units called component
Technology stack agnostic
React designed by Jordan Walke
Speed, simplicity and scalability

One way data flow
JSX
components
state
props
virtual DOM
Element

Component
it returns a set of react elements thar sjhould appear on the screen

component enable you to split your ui into indepnent, reusable pctAOIAMVStI2TMLhozPKbf5yTEXc0OJa0eENheb4w09SrgOWEs
components also accept inputs

State
each component can store its own state info in its "state" property

private and fully controlled bby the component
can be passed as propsto children

Only class components can have local state

setState methid to change the content of state

JSX attribute are passsed into a component as a single objects
available in the compoennt as props
can pass inmultiplee attributes 
cannot modify props within the component

Handling events
Handling events is a similar to the way you handle events on DOM elements:
use camelcase to specify events 
Pass function as the event handler

Lifting State up
sometimes several components may share the same data
changes to data in one component needs to be reflected to another component
Best move the shared state to a common ancestor component

list and keys
list are handled similar to js
key should be given to elements inside the array - help indentify whihc ites have changed, are added or removed

Life Cycle of the component
There are several component are used to create a react application.
As required component is created and added to DOM.

Stages of life Cycle of component in react
-mounting
-Updating
-Unmounting

Several lifecycle methods available in each Stages
MOunting Lifecycle methods
- called when an instance of a component is being created and inserted into the  DOM
- constructor() - 
- getDerivedStateFromProps()
- render()
- componentDidMount()

An earlier method now deprecated called 
- componentWillMount


Presentational and Container component
Presentational compoennt only get the data as propd and they are responsible for pureluyy Presentational compoent
Container compoennt only pass the data to its child component

component Types
Presentational vs container
Skinny vs fat 
Dumb vs Smart
Stateless and stateful

presentational component 
- maiinly concerned with rendering the "view"
- render the view based on the data that is passed to them in props
- Do not maintain teir own local state - can be relaxed to maintain only UI state than data

Container component 
Responsible formaking things work
- Data fetching, state updates
Make use of presentational component for rendering
- can wrap presentational comopnent in wrapping divs 
Provide the data to the presentational components
maintain state and communicate with data sources

life cycyle methods
Stages of life Cycle of component in react
-mounting
-Updating
-Unmounting

Several lifecycle methods available in each Stages

Updating Lifecycle methods
called when a component sis being re-rendered
- Can be caused by changes to props or state
- getDerivedStateFromProps()
- shouldComponentUpdate()
- render()
- getSnapshotBeforeUpdate()
- compoentDidUpdate()

2 Mehods that are now deprecated
componentWillReceiveProps() and componentWillUpdate()

Class Component
Extend React.Component to get class component
Need to implement the render() method that returns the view
can have local state
lifecycle hook

Functional component
Simplest way to define Reacct component
JS function that retunrs a React element, or a collection of React elements that define the view
Receives a props object as a parameter
Cannot have local state or access lifecycle hook

React Virtual DOM
Browser DOm is a browser object
Virtual DOM is saReact object
- A lightweight representation of the Browser DOM
- In menory tree data structure of plain JS objects
- Manipulations extremely fast compared to modifying the browser DOM
- created completely from scratch on every setState

Diffing Algorithm will detect those nodes that are changed
- Updates the entire sub-tree if diffing detects that 2 elements are of different types
- Using "key" you can hint child elements as stable
-- No need to re-render where keys do not change

React-Fiber : new reconsilation Algorithm in React-16 
- Incremental rendering

React Router
- to navigate among various page of your application

Collection of navigational component
- Enables navigation among views
- Router components, route matching components and navigation component
Uses a browser-based bookmarkable URLs as an instruction to naviagte to a client genrated view in your web app
- Can also pass along optional parameters

Web app routing 
react router DOm
Router compoennt <Browserrouter>
- Creates specializes history object
- Also <HashRouter> if you are uing a static fie server
- Enclose your app in BrowserRouter
 
Route matching
component Route and Switch
- <Route>'s path prop enables specification of the current location's pathname
- Route component prop specifies the corresponding viw for the location
- Using exact attribute ensures that the path must be exactly matched 
- Redirect enable the default route specification 
- Switch enables grouping together several routes
-- Will iterate over all its children and find the first one that matches the path. 

navigation
Naviagtion is supported through the <Link> and <NavLink> component
- <Link> creates links in your application 
-- will render as <a> in the html
- <NavLink> also attaches the active class to the link when its 
props matches the current location

Single page application
Web application or web site  that fits in a single page
- No need to reload th entire page
- UX like a desktop/native application
- Most Resources are retreived with a single page load
- redraw parts of the page when needed without requiring a full server roundtrip

Challenge
- Search engine optimization
- Partitioning the responsibility betwenn client and server
- Maintaining history
- Analytics
- Speeding up the initial page load