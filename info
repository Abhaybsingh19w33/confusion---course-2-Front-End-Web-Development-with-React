Why js framework or libraries?
-Complexity of managing DOM manipulation and data updates manually.
-Well Defined application architecture
    --model view container/ model view view ModelView/modelview whatevere
    --binding of model adn view : controllers, view models
    --flux architecture/redux


Software library
-collection of implementation of behaviour with a well-defined interface by which
 the behavior is invoked
-reuse of behaviour
-Modulariy
eg jquery

Sotware framework
-Abstraction in whihc software provides generic functionality that can be selectively
changed by additional user-written code
-universal, reusable environment that provides particular
functionality as part of a larger software platform
Eg, Angular, Enber, Backbone

Library vs framework
library - your code is in charge and it calls into the library when it sees fit.
framework - The framework is in charger and it calls into your code when it needs something app specific

framework
Inversion of control
Imperative approach - designer specifies how the work need to be done
Declarative approach - designer specifies what work needs to be done


React use declarative approach
Component based approach, we encapsulate behaviours into small units called component
Technology stack agnostic
React designed by Jordan Walke
Speed, simplicity and scalability

One way data flow
JSX
components
state
props
virtual DOM
Element

Component
it returns a set of react elements thar sjhould appear on the screen

component enable you to split your ui into indepnent, reusable pctAOIAMVStI2TMLhozPKbf5yTEXc0OJa0eENheb4w09SrgOWEs
components also accept inputs

State
each component can store its own state info in its "state" property

private and fully controlled bby the component
can be passed as propsto children

Only class components can have local state

setState methid to change the content of state

JSX attribute are passsed into a component as a single objects
available in the compoennt as props
can pass inmultiplee attributes 
cannot modify props within the component

Handling events
Handling events is a similar to the way you handle events on DOM elements:
use camelcase to specify events 
Pass function as the event handler

Lifting State up
sometimes several components may share the same data
changes to data in one component needs to be reflected to another component
Best move the shared state to a common ancestor component

list and keys
list are handled similar to js
key should be given to elements inside the array - help indentify whihc ites have changed, are added or removed

Life Cycle of the component
There are several component are used to create a react application.
As required component is created and added to DOM.

Stages of life Cycle of component in react
-mounting
-Updating
-Unmounting

Several lifecycle methods available in each Stages
MOunting Lifecycle methods
- called when an instance of a component is being created and inserted into the  DOM
- constructor() - 
- getDerivedStateFromProps()
- render()
- componentDidMount()

An earlier method now deprecated called 
- componentWillMount

